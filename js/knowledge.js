

var dialogOn = false;
const noAnswerFoundString = 'Ответ не найден.'
const dialogOnText = 'Свернуть';
const dialogOffText = 'Задать вопрос';
//подготовка активной среды (создание окон)

function askFilter() {
    console.log(document.getElementById("Qdialog").value?.trim())
    if (document.getElementById("Qdialog").value?.trim()) {
        ask("Qdialog");
    }
}

const speechRecognition =  SpeechRecognition || webkitSpeechRecognition;

const recognition = new speechRecognition()



function keyDownHandler(e) {
    if(e.keyCode===13)
        askFilter()
}

function prepare_environment(){

    //окна активной среды
    timeout=document.body.innerHTML.length;
    //диалоговый модуль
    document.body.innerHTML+="<div id='dialog' class='dialog' style='margin-left:-40px;'>"+
        "<div class='label' onclick='toggleDialog()'>Задать вопрос</div>"+
        "<div class='header'>История:</div>"+
        "<div class='history' id='history'></div>"+
        "<div id='input'>" +
        "<input id='Qdialog' placeholder='Введите вопрос'  onKeyDown='keyDownHandler'/><br>"+
        "<button onclick='askFilter()'>Спросить</button>"
    "</div>"+
    "</div>";





    //РАСПОЗНАВАНИЕ РЕЧИ
    //поле с распознаванием речи. Задаем API-ключ

    window.ya.speechkit.settings.apikey = '5c6d6536-b453-4589-9bc7-f16c7a795106';

    // Добавление элемента управления "Поле для голосового ввода".

    var textline = new ya.speechkit.Textline(
        'Qdialog', {
            onInputFinished: function() {
                askFilter();
            }
        });

    //КОНЕЦ РАСПОЗНАВАНИЯ РЕЧИ
    //привязка окон активной среды с событиями. Показ модального окна 1 через интервал времени, зависящий от размера страницы


    try {
        //открытие журналов посещенных адресов и дат посещения:
        //попытка использования массива адресов открытых страниц из локального хранилища
        var URLlog=JSON.parse(localStorage.URLlog);
        //удаление адресов из начала массива, пока в массиве не останется 5 адресов
        while(URLlog.length>5) URLlog.shift(0);
        //попытка использоваения массива дат открытия страниц из локального хранилища
        var log=JSON.parse(localStorage.log);
        //удаление дат из начала массива, пока в массиве не останется 5 дат
        while(log.length>5) log.shift(0);
        //проверка на необходимость срабатывания реакций:
        //только если сделан переход со страницы на страницу (не обновление страницы)
        if(location.href!=URLlog[URLlog.length-1]){
            //если сделан переход на одну из последних пяти посещенных страниц,
            //очищаем массив и показываем модальное окно 3
            if(URLlog.indexOf(location.href)!==-1){
                while(URLlog.length>0) URLlog.shift(0);//очистка массива адресов
                alert_for_back();
            }
                //только если не возникла реакция возврата на предыдущий адрес
            //проверяем необходимость реакции на быстрые переходы:
            else{
                //если сделано 5 переходов меньше чем за минуту -
                //очищаем массив и показываем модальное окно 2
                if(log.length>=5 &&  ((new Date())-Date.parse(log[0]))<60000){
                    while(log.length>0) log.shift(0);//очистка массива дат
                    alert_for_speed();
                }
            }
            //в любом случае, независимо от срабатывания реакций, при переходе со страницы на страницу:
            URLlog.push(location.href);	//запись адреса текущей страницы в массив
            log.push(new Date());		//запись даты перехода в массив
        }
    }
    catch(e){
        URLlog=[];	//инициализация массива адресов открытых страниц
        log=[];	//инициализация массива дат открытия страниц
    }
    //запись массива адресов в локальное хранилище в формате JSON
    localStorage.URLlog=JSON.stringify(URLlog);
    //запись массива дат в локальное хранилище в формате JSON
    localStorage.log=JSON.stringify(log);

}
//запуск подготовки среды при загрузке окна
window.onload = function(){prepare_environment();};
//скрытие сообщений при щелчке на фон


//показ сообщений

//ДИАЛОГ
//показ-скрытие диалогового модуля
function toggleDialog() {
    //закрытие
    if(dialogOn)
    {
        $("#dialog").animate({"margin-left":"-40px"}, 200);
        dialogOn=false;

        $("#dialog > .label").text(dialogOffText)

    }
    //открытие
    else
    {
        $("#dialog").animate({"margin-left":"-400px"}, 200);
        dialogOn=true;

        $("#dialog > .label").text(dialogOnText)

    }
}

//база знаний
const knowledge = [
    ["сила гравитационного взаимодействия", "зависит", "от массы двух небесных тел, расстояния между ними и гравитационной константы"],
    ["классическая теория тяготения", "— это", "закон, описывающий гравитационное взаимодействие в рамках классической механики<formula text ='$F = G{m_1m_2\\over r^2}$'></formula>"],
    ["закон всемирного тяготения", "— это", "описанный Ньютоном закон, описывающий гравитационное взаимодействие в рамках классической механики<formula text ='$$F = G{m_1m_2\\over r^2}$$'></formula>"],
    ["закон всемирного тяготения", "выполняется", "при малых по сравнению со скоростью света скоростях"],
    ["закон всемирного тяготения", "открыт", "Исааком Ньютоном"],
    ["скорость света", "равна", "триста тысяч метров в секунду"],
    ["физическое тело", "— это", "материальный объект, имеющий массу, форму, объём; и отделенный от других тел внешней границей раздела"],
    ["небесным телом", "считается", "естественное физическое тело, ассоциация, или структура, которую современная наука определяет как расположенную в наблюдаемой Вселенной"],
    ["гравитация", "— это", "универсальное фундаментальное взаимодействие между материальными телами, обладающими массой"],
    ["гравитационное взаимодействие", "— это", "универсальное фундаментальное взаимодействие между материальными телами, обладающими массой"],
    ["гравитационная постоянная", "— это", "фундаментальная физическая постоянная, коэффициент пропорциональности <i>G</i> в законе всемирного тяготения, равный примерно<formula text ='$6,67⋅10−11 м³/(кг·с²)$'></formula>"],
    ["большим космическими объектом", "считается", "планета, звезда или галактика"],
    ["планетой", "считается", "небесное тело, вращающееся по орбите вокруг звезды или её остатков, достаточно массивное, чтобы стать округлым под действием собственной гравитации, но недостаточно массивное для начала термоядерной реакции, и сумевшее очистить окрестности своей орбиты от планетезималей"],
    ["галактикой", "считается", "гравитационно-связанная система из звёзд, звёздных скоплений, межзвёздного газа и пыли, тёмной материи, планет" ],
    ["звезда", "— это", "массивное самосветящееся небесное тело, состоящее из газа или плазмы, в котором происходят, происходили или будут происходить термоядерные реакции"],
    ["центр массы", "— это", "геометрическая точка, положение которой определяется распределением массы в теле, а перемещение характеризует движение тела или механической системы как целого"],
    ["гравитация в общем случае", "описывается", "теорией относительности Эйнштейна"],
    ["теория относительности", "открыта", "Альбертом Эйнштейном"],
    ["задача двух тел", "— это", "одна из задач классической механики, которая состоит в том, состоит в том, чтобы определить движение двух точечных частиц, которые взаимодействуют только друг с другом. Распространённые примеры включают спутник, обращающийся вокруг планеты, планета, обращающаяся вокруг звезды, две звезды, обращающиеся вокруг друг друга (двойная звезда), и классический электрон, движущийся вокруг атомного ядра"],
    ["первые три решения задачи трех тел", "были найдены", "Эйлером в 1767 году"],
    ["Анри Пуанкаре", "доказал", "отсутствие общего решения задачи трех тел"],
    ["отсутствие общего решения задачи трех тел", "было доказано", "Пуанкаре"],
    ["частных решений задачи трех тел", "существует", "бесконечное множество"],
    ["теория относительности Эйнштейна", "описывает", "гравитация в общем случае"],
    ["гравитационная постоянная", "измеряется", "в метрах кубических, деленных на килограммы на секунды в квадрате<formula text ='$м³/(кг·с²)$'></formula>"],
    ["скорость", "измеряется", "в метрах в секунду<formula text ='$м/с$'></formula>"],
    ["расстояние", "измеряется", "в метрах<formula text ='$м$'></formula>"],
    ["масса", "измерятся", "в килограммах<formula text ='$кг$'></formula>"],
    ["масса первого тела", "обозначается", "как <formula text ='$m_1$'>"],
    ["масса второго тела", "обозначается", "как <formula text ='$m_2$'>"],
    ["расстояние между центрами масс тел", "обозначается", "как <formula text ='$r$'></formula>"],
    ["G", "обозначает", "гравитационную константу<formula text ='$6,67⋅10−11 м³/(кг·с²)$'></formula>"],
    ["F", "обозначает", "силу гравитационного взаимодействия"],
    ["r", "обозначает", "расстояние между центрами массы двух тел"],
    ["сила", "обозначается", "как <formula text ='$F$'></formula>"],
    ["гравитационная константа", "обозначается", "как <formula text ='$G$'></formula>"],
    ["скорость света", "обозначается", "как <formula text ='$c$'></formula>"],
    ["скорость", "обозначается", "как <formula text ='$v$'></formula>"],
    ["сила", "измерятся", "в Нюьтонах<formula text ='$Н$'></formula>"],
    ["задача трех тел", "— это", "одна из задач небесной механики, состоящая в определении относительного движения трех тел (материальных точек), взаимодействующих по закону тяготения Ньютона (например, Солнца, Земли и Луны)"],
    ["Пуанкаре", "доказал", "отсутствие общего решения для задачи трех тел"],
    ["Альберт Эйнштейн", "— это", "физик-теоретик, один из основателей современной теоретической физики, лауреат Нобелевской премии по физике, общественный деятель-гуманист<img src='../content/einstein.jpg'>"],
    ["движение трех тел под действием гравитации", "характеризуется", "ацикличностью и непредсказуемостью"],
    ["движение трех тел", "характеризуется", "ацикличностью и непредсказуемостью"],
    ["Физика", "— это", "область естествознания: наука о наиболее общих законах природы, о материи, её структуре, движении и правилах трансформации. Понятия физики и её законы лежат в основе всего естествознания"],
    ["Физика", "является", "точной наукой"],
    ["Точные науки", "— это", "отрасли науки, в которых изучают количественно точные закономерности и используются строгие методы проверки гипотез, основанные на воспроизводимых экспериментах и строгих логических рассуждениях"],
    ["Физика", "— это", "наука о природе (естествознание) в самом общем смысле (часть природоведения)"],
    ["Предмет изучения физики", "составляет", "материя"],
    ["Предметом изучения физики", "является", "фундаментальные взаимодействия природы, управляющие движением материи"],
    ["Материя", "— это", "одно из основных понятий физики, общий термин, определяющийся множеством всего содержимого пространства - времени и влияющий на его свойства."],
    ["Фундаментальные взаимодействия", "— это", "качественно различающиеся типы взаимодействия элементарных частиц и составленных из них тел."],
    ["Физика", "тесно связана", "с математикой: математика предоставляет аппарат, с помощью которого физические законы могут быть точно сформулированы"],
    ["Физические", "формулируются", "в виде математических уравнений, причём используются более сложные разделы математики, чем обычно в других науках. И наоборот, развитие многих областей математики стимулировалось потребностями физической науки."],
    ["Источником знаний физики", "является", "практическая деятельность"],
    ["Правильность физических знаний", "проверяется", "экспериментом, использованием научных знаний в производственной деятельности"],
    ["Обобщением результатов научных наблюдений и эксперимента", "являются", "физические законы, которыми объясняются эти наблюдения и эксперименты"],
    ["Закон", "— это", "утверждение, имеющее доказательство, которое описывает соотношения, связи между различными научными понятиями, предложенное в качестве объяснения фактов и признанное на данном этапе научным сообществом"],
    ["Теорема", "— это", "утверждение, истинность которого установлена путём доказательства"],
    ["автором курсовой работы", "является", "Тумаш Станислав Игоревич 3 ИСиТ"],
    ["Солнце", "— это", "одна из звезд галактики Млечный Путь и единственная звезда Солнечной системы"],
    ["Луна", "— это", "единственный естественный спутник планеты Земля"],
    ["Спутник", "— это", "небесное тело, обращающееся по определённой траектории (орбите) вокруг другого объекта в космическом пространстве под действием гравитации. Различают искусственные и естественные спутники."],
    ["Леонард Эйлер", "— это", "швейцарский, прусский и российский математик и механик, внёсший фундаментальный вклад в развитие этих наук (а также физики, астрономии и ряда прикладных наук)<img src='../content/euler.jpg'>"],
    ["Исаак Ньютон", "— это", "английский физик, математик, механик и астроном, один из создателей классической физики<img src='../content/newton.png'>"],
    ["Анри Пуанкаре", "— это",  "французский математик, механик, физик, астроном и философ<img src='../content/poincare.jpg'>"],
    ["Солнце", "выглядит", "вот так <img src='../content/sun.png'>"],
    ["Луна", "выглядит", "вот так <img src='../content/moon.jpg'>"],
    ["Земля", "выглядит", "вот так <img src='../content/earth.png'>"],
    ["Млечный путь", "— это", "галактика, в которой находятся Земля, Солнечная системаПерейти к разделу «#Расположение Солнца в Галактике» и все отдельные звёзды, видимые невооружённым глазом. Относится к спиральным галактикам с перемычкой"],
    ["механика", "— это", "раздел физики, наука, изучающий движение материальных тел и взаимодействие между ними; при этом движением в механике называют изменение во времени взаимного положения тел или их частей в пространстве"]
];

//поиск и вывод ответа и вопроса
function ask(questionInput){
    var question=document.getElementById(questionInput).value.trim();
    //выдвижение диалогового модуля
    $("#dialog").animate({"margin-left":"-400px"}, 1000, function() {});
    dialogOn=true;
    //вывод вопроса
    //document.getElementById("history").innerHTML+="<div class='question'>"+question+"</div>";
    var newDiv=document.createElement("div");
    newDiv.className='question';
    newDiv.innerHTML=question;
    document.getElementById("history").appendChild(newDiv);
    //поиск и вывод ответа
    //document.getElementById("history").innerHTML+="<div class='answer'>"+getAnswer(question)+"</div>";
    //создаем блок <div>
    newDiv=document.createElement("div");
    //задаем класс оформления созданного блока
    newDiv.className='answer';
    //получаем ответ на вопрос и наполняем им созданный блок

    let divTextChild = document.createElement("div");
    const answer = getAnswer(question);
    divTextChild.innerHTML = answer;
    newDiv.appendChild(divTextChild);


    const formula = [...divTextChild.children].find(child => child.localName === "formula");
    if (formula) {
        let divFormulaChild = document.createElement("div");

        divFormulaChild.innerHTML += `<div>${formula.getAttribute("text")}</div>`;

        newDiv.appendChild(divFormulaChild);

        MathJax.Hub.Queue(["Typeset",MathJax.Hub,divFormulaChild]);
    }


    const img = [...divTextChild.children].find(child => child.localName === "img");
    if (img) {
        const fullscreen = target => {
            if (target.localName !== "img") {
                return;
            }
            target?.requestFullscreen() || target?.msRequestFullscreen() || target?.mozRequestFullScreen() || target?.webkitRequestFullscreen();

        }

        newDiv.onclick = ({target}) => fullscreen(target);
    }

    if (divTextChild.innerText === noAnswerFoundString) {
        const googleSearchQuery = `https://www.google.com/search?q=${question.split(' ').join('+')}`;
        let googleSearchQueryDiv = document.createElement("div");
        googleSearchQueryDiv.innerHTML = `Можно попробовать найти ответ в <a href=${googleSearchQuery}>Google</a>`
        newDiv.appendChild(googleSearchQueryDiv);
    }

    //ОЗВУЧКА - СИНТЕЗ РЕЧИ
    //флаг, нужна ли озвучка (не нужна, если есть анимация)
    var needSound=true;

    //если флаг не был сброшен
    if(needSound){
        //добавляем в ответ тег аудио, ссылающийся на звук от синтезатора речи яндекса
        //в обращении к яндексу tts.voicetech.yandex.net указывается:
        // - формат звука: format=wav
        // - язык озвучиваемого текста: lang=ru-RU
        // - ключ, полученный при регистрации в личном кабинете для SpeechKit Cloud API: key=4a4d3a13-d206-45fc-b8fb-e5a562c9f587
        // - озвучиваемый текст, который берется из сгенерированного ответа: text="+newDiv.innerText+"
        //alert("Incoming transmission.");
        newDiv.innerHTML+="<audio controls='true' autoplay='true' src='http://tts.voicetech.yandex.net/generate?format=wav&lang=ru-RU&key=4a4d3a13-d206-45fc-b8fb-e5a562c9f587&text="+(answer)+"'></audio>";
    }

    console.log(divTextChild.innerText)

    // КОНЕЦ ОЗВУЧКИ
    document.getElementById("history").appendChild(newDiv);
    // ЕЩЕ КУСОЧЕК ДЛЯ ОЗВУЧКИ
    //запуск звука
    if(newDiv.lastChild.tagName==="AUDIO"){
        newDiv.lastChild.play();
    }
    //прокрутка истории в самый низ
    document.getElementById("history").scrollTop = document.getElementById("history").scrollHeight;
    //очистка текстового поля для ввода вопроса
    document.getElementById(questionInput).value="";
}

//псевдоокончания сказуемых (глаголов, кратких причастий и прилагательных )
let endings =
    [
        ["ет","(ет|ут|ют)"],
        ["ут","(ет|ут|ют)"],
        ["ют","(ет|ут|ют)"],		     //1 спряжение

        ["ит","(ит|ат|ят)"],
        ["ат","(ит|ат|ят)"],
        ["ят","(ит|ат|ят)"],		     //2 спряжение

        ["ется","(ет|ут|ют)ся"],
        ["утся","(ет|ут|ют|ующие)ся"],
        ["ются","(ет|ут|ют)ся"], //1 спряжение, возвратные

        ["ится","(ит|ат|ят)ся"],
        ["атся","(ит|ат|ят)ся"],
        ["ятся","(ит|ат|ят)ся"],     //2 спряжение, возвратные

        ["ящие","ящие"],
        ["ee", "ee"],
        ["ен","ен"],
        ["ую","ая"],
        ["му","ма"],
        ["ена","ена"],
        ["ено","ено"],
        ["ены","ены"],		    //краткие прилагательные

        ["ан","ан"],
        ["ая","ую"],
        ["ана","ана"],
        ["ано","ано"],
        ["аны","аны"],		    //краткие прилагательные

        ["жен","жен"],
        ["жна","жна"],
        ["жно","жно"],
        ["жны","жны"],

        ["какой","какой"],
        ["какая","какая"],
        ["какова","какова"],
        ["такое", "является"],
        ["состоит", "— это"],
        ["такое", "— это"],
        ["такой", "— это"],
        ["такое", "считается"],
        ["кто", "кто"],

        ["go", "go"],
        ["го", "го"],
        ["ов", ""]
    ]
																																																	//для вопроса "что такое А?" ответ - "А - это ..."
//черный список слов, распознаваемых как сказуемые по ошибке
var blacklist = [ "замена", "замены", "атрибут", "маршрут", "член", "нет" ];
//функция определения сказуемых по соответствующим псевдоокончаниям
function getEnding(word)
{
    //проверка по черному списку
    if (blacklist.indexOf(word)!==-1) return -1;
    //перебор псевдоокончаний
    for (var j = 0; j < endings.length; j++)
    {
        //проверка, оканчивается ли i-ое слово на j-ое псевдоокончание
        if(word.substring(word.length-endings[j][0].length)===endings[j][0]){
            return j;   //возврат номера псевдоокончания
        }
    }
    return -1;  //если совпадений нет - возврат -1
}

//функция, которая делает первую букву маленькой
function small1(str)
{
    return str.substring(0, 1).toLowerCase() + str.substring(1);
}

//функция, которая делает первую букву большой
function big1(str)
{
    return str.substring(0, 1).toUpperCase() + str.substring(1);
}


const replace_dictionary = [
    ["Эйлер", "Леонард Эйлер"],
    ["Эйнштейн", "Альберт Эйнштейн"],
    ["Пуанкаре", "Анри Пуанкаре"]
]



//главная функция, обрабатывающая запросы клиентов
function getAnswer(question, try_num = 0)
{

//знаки препинания
    var separators = "'\",.!?()[]\\/";
    //получение текста из параметра запроса
    var txt = small1(question);
    //добавление пробелов перед знаками препинания
    for (var i = 0; i < separators.length; i++)
        txt = txt.replace(separators[i], " " + separators[i]);
    //массив слов и знаков препинания
    var words = txt.split(' ');
    //флаг, найден ли ответ
    var result = false;
    //формируемый функцией ответ на вопрос
    var answer = "";
    //перебор слов
    for (let i = 0; i < words.length; i++)
    {
        //alert(words[i]);
        //поиск номера псевдоокончания
        var ending = getEnding(words[i]);
        //если псевдоокончание найдено – это сказуемое, подлежащее в вопросе после него
        if (ending >= 0)
        {
            words[i] = words[i].substring(0, words[i].length - endings[ending][0].length) + endings[ending][1];
            //создание регулярного выражения для поиска по сказуемому из вопроса
            var predicate = new RegExp(words[i]);
            //для кратких прилагательных захватываем следующее слово
            if (endings[ending][0] === endings[ending][1])
            {
                predicate = new RegExp(words[i] + " " + words[i + 1]);
                i++;
            }
            var subject_array = words.slice(i + 1);
            var subject_text = subject_array.join(" ");
            //создание регулярного выражения для поиска по подлежащему из вопроса
            //из слов подлежащего выбрасываем короткие предлоги (периметр у квадрата = периметр квадрата)
            for (let j = 0; j < subject_array.length; j++){
                if(subject_array[j].length < 3){
                    subject_array.splice(j);
                    j--;
                }
            }
            var subject_string = subject_array.join(".*");
            //только если в подледлежащем больше трех символов
            if (subject_string.length>3)
            {
                var subject = new RegExp(".*" + subject_string + ".*");
                //поиск совпадений с шаблонами среди связей семантической сети
                knowledge.forEach(item => {
                    if (predicate.test(item[1].toLowerCase()) && (subject.test(item[0].toLowerCase()) || subject.test(item[2].toLowerCase())))
                    {
                        //создание простого предложения из семантической связи
                        answer=big1(item[0] + " " + item[1] + " " + item[2]);
                        result = true;
                    }
                });
                //если совпадений с двумя шаблонами нет,
                if (result === false){
                    //поиск совпадений только с шаблоном подлежащего
                    knowledge.forEach(item => {
                        if ((subject.test(item[0].toLowerCase()) || subject.test(item[2].toLowerCase())))
                        {
                            //создание простого предложения из семантической связи
                            answer=big1(item[0] + " " + item[1] + " " + item[2]);
                            result = true;
                        }
                    });
                }
            }
        }
    }
    //если ответа нет
    if(!result)
        if (try_num === 0)
        {
            for (let el of replace_dictionary) {
                question = question.replaceAll(el[0], el[1])
            }
            return getAnswer(question, 1)
        }
        else {
            answer = noAnswerFoundString;

        }

    return answer;
}

